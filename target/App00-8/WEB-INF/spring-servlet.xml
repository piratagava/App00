<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://xmlns.jcp.org/xml/ns/persistence
    http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
    
     
    <!-- Esto permite enviar solicitudes a los Controladores -->
    <mvc:annotation-driven />
	<context:annotation-config />
	<mvc:default-servlet-handler />
	
	<!-- paquete que va escanear en busca de componentes -->
	<context:component-scan base-package="com.alumno.app.*"/>	
    
	
	<!-- Propiedade de mi base de datos -->
	<context:property-placeholder location="/META-INF/jdbc.properties" />
		
	<!-- Configuracion para trabajar con JPA -->
<bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	
	<!-- utilizamos la configuracion del bean dataSourceorg.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean -->
    <property name="dataSource" ref="dataSource"/>
    
    <!-- Esto hace que /META-INF/persistence.xml ya no sea necesario -->
    <property name="packagesToScan" value="com.alumno.app.model"/>
    
    <!-- Implementación de JpaVendorAdapter para Hibernate EntityManager.
         Expone el proveedor de persistencia de Hibernate y la interfaz de extensión EntityManager -->
    <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
     </property>
     
     <!-- Creo las propiedades de Jpa para sql -->
    <property name="jpaProperties"> 
        <props>
           	<prop key="spring.jpa.properties.hibernate.dialect">${spring.jpa.properties.hibernate.dialect}</prop>
           	<prop key="spring.jpa.show_sql">${spring.jpa.show_sql}</prop>			
			<prop key="spring.jpa.hibernate.hbm2ddl.auto">${spring.jpa.hibernate.hbm2ddl.auto}</prop>		
			<prop key="spring.jpa.hibernate.naming-strategy">${spring.jpa.hibernate.naming-strategy}</prop>
        </props>
    </property>
</bean>

	<!-- DataSource conexion -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.user}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>

<!-- Este administrador de transacciones es apro<servlet>	
	piado para aplicaciones que usan un solo JPA EntityManagerFactory 
	para el acceso a datos transaccionales. JTA (generalmente a través de JtaTransactionManager).
	Es necesario para acceder a múltiples recursos transaccionales dentro de la misma transacción. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean>
   
   <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="WEB-INF/views/" />
		<property name="suffix" value=".html" />
	</bean>
	
	
<!--responsable de registrar los componentes Spring necesarios que impulsan la gestión de transacciones
 	impulsada por anotaciones; como cuando se invocan los métodos @Transactional-->
   <tx:annotation-driven />
	
</beans>